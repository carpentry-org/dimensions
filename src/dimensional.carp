
(load "src/index.carp")

;; TODO: Document these interfaces once Carp supports it.
(definterface lookup (Fn [(f s a)] (Fn [(Index (f s Opaque) Int)] a)))
(definterface positions (Fn [] (f (Size n) (Index (f (Size n) Opaque) Int))))
(definterface smap (Fn [(Ref (Fn [a] b)) (Ref (f s a))] (f s b)))

(doc tabulate "
  Tabulate maps a `lookup` function (any function that takes an `Index` as an
  argument) over the positions of a sized functor.

  `(tabulate (lookup f))= (id f)`

  To make this function useful, one often needs to use an overarching context
  to ensure the resulting functor is sized appropriately. ")
(defn tabulate [f]
  (smap f &(positions)))

(defmodule Dimensional
  (doc transpose "
    Transpose takes a sized functor whose inhabitants are sized functors and
    effectively swaps their sizes; it is equivalent to matrix transposition.

    For example, given a Vector of Size 3 of Vectors of Size 2

    `(Vector [(Vector [1 2]) (Vector [3 4]) (Vector [5 6])])`

    transpose will return a Vector of size 2 of Vectors of size 3:

    `(Vector [(Vector [1 3 5]) (Vector [2 4 6])])`")
  (sig transpose (Fn [(Ref (f (Size n) (g (Size m) a)))] (g (Size m) (f (Size n) a))))
  (defn transpose [f]
    (tabulate &(fn [i] (smap &(fn [x] ((lookup x) i)) f))))
)
